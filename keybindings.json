// Place your key bindings in this file to override the defaults


/*  You can configure whichever keys shortcuts you like by changing the "key" value.
    Note - Some useful shortcuts are already defined in VSC by default.
    ````````````````````````````````````````````````````````````````````
    ctrl + shift + s = already assigned to File: Save as.                            My switch statement creator overrides this   [JS 10]
    ctrl + shift + r = already assigned to refactor.                                 My require statement creator overrides this  [JS 12]
    ctrl + shift + f = already assigned to search a file in your directory           My flexbox centering script overrides this   [CSS 02]
    ctrl + shift + z = already assigned to redo action                               Useful to keep unmodified
    ctrl + z         = already assigned to undo previous action                      Useful to keep unmodified
*/

[
  { //JS 01 ---------------------------------------------------------------------------------------
    "description": "Creates a blank console.log(); and places your cursor inside the brackets. If text is selected, it wraps the selection",
    "key": "ctrl+shift+c",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "console.log(${TM_SELECTED_TEXT}$1);"
    }
  },//JS 02 ---------------------------------------------------------------------------------------
  {
    "description": "Generates a console.log() for checking a variable contents",
    "key": "ctrl+shift+v",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "console.log(`Our ${1:variableToCheck} is: `, ${1:variableToCheck});"
    }
  }, //JS 03 --------------------------------------------------------------------------------------
  {
    "description": "Generates a console.log() with details on a variables datatype, time created, and its contents",
    "key": "ctrl+shift+d",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "console.log(`Our ${1:variableName} is datatype: `, typeof ${1:variableName},\n`\\nTime created:`, new Date(),\n`\\nAnd it contains:\\n`, ${1:variableName});"
    }
  },//JS 04 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a blank template literal ${} and places your cursor between the curly-braces. If text is selected, it wraps the selection",
    "key": "ctrl+shift+x",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "${${TM_SELECTED_TEXT}$1}"
    }
  },//JS 05 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for creating an object literal",
    "key": "ctrl+shift+o",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const ${1:objectName} = {\n\t${2:key}: ${3:value},\n\t${4:key2}: ${5:value2}\n};"
    }
  },//JS 06 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for a function expression",
    "key": "ctrl+shift+e",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const ${1:functionName} = function(${2:parameters}) {\n\t${3:// Function code goes here}\n};"
    }
  },//JS 07 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for a C-style loop",
    "key": "ctrl+shift+k",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "for (let i = ${1:0}; i < ${2:array}.length; i++) {\n\t${3:// Run this code while the loop condition resolves as true}\n}"
    }
  },//JS 08 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for an if -> else if -> else statement chain",
    "key": "ctrl+shift+i",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "if (${1:condition1}) {\n\t// Run this code\n\t\n} else if (${2:condition2}) {\n\t// If that doesnt resolve, run this instead\n\t\n} else {\n\t// Otherwise, run this code\n\t\n}"
    }
  },//JS 09 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for a ternary operation",
    "key": "ctrl+shift+y",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "${1:condition} ? ${2:expressionIfTrue} : ${3:expressionIfFalse}"
    }
  },//JS 10 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for a switch statement",
    "key": "ctrl+shift+s", 
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "switch (${1:expression}) {\n\tcase ${2:value1}:\n\t\t${3:// Your code here}\n\t\tbreak;\n\tcase ${4:value2}:\n\t\t${5:// Your code here}\n\t\tbreak;\n\tdefault:\n\t\t${6:// Your code here}\n}"
    }
  },//JS 11 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for an array.map method statement",
    "key": "ctrl+shift+m",
    "command": "editor.action.insertSnippet",
    "args": {
      "snippet": "const ${1:newArrayName} = ${2:originalArray}.map(element => {\n\treturn element ${4:/*Some operation to do over each element*/};\n});"
    }
  },//JS 12 ---------------------------------------------------------------------------------------
    {
    "description": "Creates a template for module import require statement",
    "key": "ctrl+shift+r",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "const ${1:importName} = require('./${2:pathToModule}');"
    }
  },//JS 13 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for initializing a promise",
    "key": "ctrl+shift+p",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "const ${1:promiseName} = new Promise((resolve, reject) => {\n\t// Additional code here\n\n\tif (${2:metCondition}){\n\tresolve(${3:passGoodResult}); //Passes data along to .then\n\t}\n\telse if (${4:failedCondition}){ //Passes data to along .catch\n\treject(error, ${5:passBadResult});\n\t}\n});"
    }
  },//JS 14 ---------------------------------------------------------------------------------------
  { 
    "description": "Creates a template for a completing a promise",
    "key": "ctrl+shift+[",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "${1:promiseName}\n.then((${2:goodResult}) => {\nconsole.log('Promise Resolved:', ${2:goodResult});\n// Your code here\n\n})\n.catch((error, ${3:badResult}) => {\nconsole.error('Promise Rejected:', badResult || error.message);\n});"
    }
  },//JS 15 ---------------------------------------------------------------------------------------
  

    //placeholder   Create a template for try-catch block *coming soon*


  //JS 16 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for an AJAX request for async operations",
    "key": "ctrl+shift+j",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "$.ajax({\n\turl: `${1:/route}`,\n\tmethod: '${2:GET}',  // HTTP methods are: 'GET', 'POST', 'PUT', 'DELETE'\n\tsuccess: function(dataOnSuccess){\n\t\tconsole.log(`$.ajax GET request came through. Data is: `, dataOnSuccess);\n\t\t// Code to run on successful GET request...\n\n\t\t//If using a POST request\n\t\tconsole.log(`$.ajax POST the following data to our '${this.url}' route:\\n`, this.data);\n\t},\n\terror: function(error){\n\t\tconsole.error(`$.ajax ${this.method} request error on route: '${this.url}'\\nDetails:`, error);\n\t}\n});"
    }
  },//JS 17 ---------------------------------------------------------------------------------------
  {
    "description": "Creates a template for a jQuery event listener on an HTML element, select what kind of event you want it to listen to as well",
    "key": "ctrl+shift+l",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "$('${1:.HTML-element}').on('${2:click}', function(event){\n\tconsole.log(`Event listener registered a ${2:click} on our ${1:.HTML-element} element!`);\n\tconsole.log(`Details on this event:\\n`, event);\n\n\t// Code that runs on event listener trigger\n\tevent.preventDefault(); // Optional, delete it if not required\n\n\n});"
    }
  },//JS 18 ---------------------------------------------------------------------------------------
  

  //placeholder   Create a template for a PG pool query *coming soon*







  //HTML MD 01 -----------------------------------------------------------------------------------
  {
    "description": "Wraps any selected text in angled brackets for HTML and markdown and lets you define the element tag. (SEPARATES LINES)",
    "key": "ctrl+shift+w",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "<${1:elementType}${0}>\n\t$TM_SELECTED_TEXT\n</${1:elementType}>"
    }
  },//HTML MD 02 -----------------------------------------------------------------------------------
  {
    "description": "Wraps any selected text in angled brackets for HTML and markdown and lets you define the tag. (INLINE)",
    "key": "ctrl+shift+q",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "<${1:elementType}>$TM_SELECTED_TEXT</${1:elementType}>"
    }
  },





  //CSS 01 ----------------------------------------------------------------------------------------
  {
    "description": "Creates a border around the HTML element, useful for determining the element size and its child element spacing",
    "key": "ctrl+shift+b",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "border: 3px dashed ${1:limegreen};"
    }
  },//CSS 02 --------------------------------------------------------------------------------------
  {
    "description": "Applies display:flex to make a flex container on the element, and centers the child elements vertically and horizontally",
    "key": "ctrl+shift+f",
    "command": "editor.action.insertSnippet",
    "args": {
        "snippet": "display: flex;\njustify-content: center;  /* Aligns child elements horizontally (left and right) */\nalign-items: center;      /* Aligns child elements vertically (up and down) */"
    }
  },




  // Disables default shortcuts that are annoying and close VSC without warning -------------------
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  }
] 

// src: https://github.com/ChrisPytel/handy-vsc-snippets    handy-vsc-snippets v1.3    2024_APR 25